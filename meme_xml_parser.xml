<tool id="MEMEXMLParser" name="Check for motif existence in MEME xml file" version="1.0.0">
    <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <command>
	<![CDATA[

        #set output_dir = $output_txt.files_path
        mkdir -p $output_dir &&

        python $__tool_directory__/meme_xml_parser.py  
        #for $i in $input_xml_list:
            --input_xml_file "$i"
            --input_file_name "$i.dataset.name"  
        #end for
        --output_xml_path '$output_txt.files_path'
        && mv $output_dir/../working/*.txt '$output_txt'
        && mv $output_dir/*.xml '$output_dir/../working/'
        ]]>
    </command>
    <inputs>

        <param name="input_xml_list" type="data_collection" collection_type="list" format="xml" label="input: xml list" />
        <!-- <param name="input_xml" type="data" format ="xml" label="input: xml file" /> -->
</inputs>

    <outputs>
        <data name="output_txt" format="txt" label="${tool.name} (txt file) on ${on_string}" />
        <!-- <data name="output_xml" format="xml" label="${tool.name} (bed file) on ${on_string}" /> -->
        <collection name="output_xml2" type="list" label=" ${tool.name} (xml) list on ${on_string} ">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.xml" directory="."  format= 'xml' visible="false"  /> 
        </collection>

    </outputs>
    <tests>
    </tests>
    <help>
**What it does**

This tool takes as the input list of xml files generated by meme. 
It then generates a ist of the xml files in which the xml files that don't have motif, are removed.
It also generates a txt file reporting whether a motif is found for each xml file.
Note: Each xml file corresponds to one subtype.


    </help>
    <expand macro="citations_two" />
</tool>

